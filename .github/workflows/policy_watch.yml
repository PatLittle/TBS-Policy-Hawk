name: Policy Watch

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0,8,16 * * *'

permissions:
  contents: write
  issues: write
  models: read

jobs:
  policy-hawk:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history to enable comparing with previous file versions
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Python dependencies
        run: |
          pip install -r requirements.txt

      - name: Install Playwright browsers
        run: |
          playwright install --with-deps chromium

      - name: Ensure data directories exist
        run: |
          mkdir -p data screenshots

      - name: Fetch RSS feed and policy documents
        id: fetch
        run: |
          python scripts/fetch_feed.py
          # Check for new or updated files to control subsequent steps
          if [[ -n $(git status --porcelain data/) ]]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push data updates
        if: steps.fetch.outputs.changes_detected == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add data/
          git commit -m 'chore: update policy data and documents'
          git push

      - name: Create issues with screenshots for new items
        if: steps.fetch.outputs.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/create_issues_with_screenshots.py

      - name: Commit and push issue map and screenshots
        if: steps.fetch.outputs.changes_detected == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add screenshots/ data/issue_map.json README.md *.png
          if ! git diff --staged --quiet; then
            git commit -m 'chore: create issues and update screenshots'
            git push
          fi

      - name: Analyze document changes with AI and comment on issues
        if: steps.fetch.outputs.changes_detected == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/analyze_changes.py --post-to-github --append-output --output-file grok-diff.md

      - name: Commit and push AI analysis
        if: steps.fetch.outputs.changes_detected == 'true'
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git add grok-diff.md
          if ! git diff --staged --quiet; then
            git commit -m 'chore: update AI analysis'
            git push
          fi

      - name: No changes detected
        if: steps.fetch.outputs.changes_detected == 'false'
        run: echo "No new policy items detected."
